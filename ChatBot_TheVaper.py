import logging
import psycopg2
from telegram import Update, ForceReply, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from fuzzywuzzy import fuzz
from fuzzywuzzy import process

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Postgresql
conn = psycopg2.connect(
    host="localhost",
    database="TheVaper",
    user="postgres",
    password="28012003"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Updater —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≤ —à–∞–≥–µ 1
updater = Updater(token='6292228126:AAGdDxDXs65BSsDEJjxQDIsJ5EbUaUT0crI', use_context=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton("üõí–æ—Ç–ª–æ–∂–∏—Ç—å"), KeyboardButton("üõçÔ∏è—Ç–æ–≤–∞—Ä—ã")],
        [KeyboardButton("üéÅ–∞–∫—Ü–∏–∏"), KeyboardButton("üí¨–ø–æ–º–æ—â—å")],
        [KeyboardButton("üë§–∫–∞–±–∏–Ω–µ—Ç")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
def products_menu() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton("üîãüí®üö¨Pod-—Å–∏—Å—Ç–µ–º—ã"), KeyboardButton("üöÆ–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")],
        [KeyboardButton("üíß–ñ–∏–¥–∫–æ—Å—Ç—å"), KeyboardButton("üí®–ê—Ç–æ–º–∞–π–∑–µ—Ä—ã")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢–æ–≤–∞—Ä—ã"
def show_products_menu(update: Update, context: CallbackContext) -> None:
    context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=products_menu())

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
def show_products(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    product_category = update.message.text
    
    # –ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cur = conn.cursor()
    cur.execute("SELECT * FROM products WHERE category ILIKE %s", ('%' + product_category + '%',))
    products = cur.fetchall()
    conn.commit()
    
    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã
    if products:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        response = f"–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{product_category}\":\n"
        for product in products:
            response += f"{product[1]} - –¶–µ–Ω–∞: {product[3]} —Ä—É–±.\n"
            response += f"  –¶–≤–µ—Ç: {product[4]}, –í–∫—É—Å: {product[5]}, –ö—Ä–µ–ø–∫–æ—Å—Ç—å: {product[6]}\n"
        context.bot.send_message(chat_id=update.effective_chat.id, text=response)
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{product_category}\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–¢–æ–≤–∞—Ä—ã" –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
updater.dispatcher.add_handler(MessageHandler(Filters.text & Filters.regex(r'^(—Ç–æ–≤–∞—Ä—ã)$'), show_products_menu))
updater.dispatcher.add_handler(MessageHandler(Filters.text & (Filters.regex(r'^Pod-—Å–∏—Å—Ç–µ–º—ã$') | Filters.regex(r'^–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞$') | Filters.regex(r'^–ñ–∏–¥–∫–æ—Å—Ç—å$') | Filters.regex(r'^–ê—Ç–æ–º–∞–π–∑–µ—Ä—ã$')), show_products))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
def show_categories(update: Update, context: CallbackContext) -> None:
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    categories_keyboard = [
        [KeyboardButton("Pod-—Å–∏—Å—Ç–µ–º—ã"), KeyboardButton("–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")],
        [KeyboardButton("–∂–∏–¥–∫–æ—Å—Ç—å"), KeyboardButton("–∞—Ç–æ–º–∞–π–∑–µ—Ä—ã")],
        [KeyboardButton("–Ω–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(categories_keyboard, resize_keyboard=True)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def show_products(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    category = update.message.text
    # –ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM products WHERE category = %s", (category,))
    products = cursor.fetchall()
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    products_keyboard = []
    for product in products:
        products_keyboard.append([KeyboardButton(product[0])])
    products_keyboard.append([KeyboardButton("–Ω–∞–∑–∞–¥")])
    reply_markup = ReplyKeyboardMarkup(products_keyboard, resize_keyboard=True)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ç–æ–≤–∞—Ä–æ–≤
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=reply_markup)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["category"] = category

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
def show_stores_and_send_order(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    product = update.message.text
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
    stores_keyboard = [
        [KeyboardButton("–º–∞–≥–∞–∑–∏–Ω 1"), KeyboardButton("–º–∞–≥–∞–∑–∏–Ω 2")],
        [KeyboardButton("–º–∞–≥–∞–∑–∏–Ω 3"), KeyboardButton("–º–∞–≥–∞–∑–∏–Ω 4")],
        [KeyboardButton("–Ω–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(stores_keyboard, resize_keyboard=True)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=reply_markup)
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ–∂–µ–ª–∞–Ω–∏—è):", reply_markup=ForceReply())
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["product"] = product

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
def send_order(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id
    db_cursor = conn.cursor()
    user_id = user.id
    comment = context.user_data.get('comment', None)
    order_items = context.user_data.get('order_items', [])
    store = context.user_data.get('store', None)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    if not order_items:
        context.bot.send_message(chat_id=chat_id, text='–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    if not store:
        context.bot.send_message(chat_id=chat_id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω.')
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞
    order_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–∫–∞–∑–∞–ª —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n'
    for item in order_items:
        order_text += f'{item["name"]} - {item["price"]} —Ä—É–±.\n'
    order_text += f'\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else "–Ω–µ—Ç"}'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞
    try:
        db_cursor.execute('INSERT INTO orders (store_id, user_id, order_text) VALUES (%s, %s, %s)',
                          (store, user_id, order_text))
        conn.commit()
        context.bot.send_message(chat_id=chat_id, text='–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω.')
    except Exception as e:
        conn.rollback()
        context.bot.send_message(chat_id=chat_id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}')

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–æ—Ç–ª–æ–∂–∏—Ç—å"
def delay(update: Update, context: CallbackContext) -> None:
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    categories_menu = [['Pod-—Å–∏—Å—Ç–µ–º—ã', '–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'], ['–∂–∏–¥–∫–æ—Å—Ç—å', '–∞—Ç–æ–º–∞–π–∑–µ—Ä—ã']]
    categories_keyboard = ReplyKeyboardMarkup(categories_menu, one_time_keyboard=True, resize_keyboard=True)
    context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=categories_keyboard)
    return WAITING_CATEGORY

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
def choose_category(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤
    category = update.message.text

    # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    db_cursor = conn.cursor()
    db_cursor.execute('SELECT id, name, price FROM products WHERE category = %s', (category,))
    products = db_cursor.fetchall()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    products_menu = [[KeyboardButton(product[1])] for product in products]
    products_menu.append([KeyboardButton('–ì–æ—Ç–æ–≤–æ')])
    products_keyboard = ReplyKeyboardMarkup(products_menu, one_time_keyboard=True, resize_keyboard=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['category'] = category

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–æ–≤
    context.bot.send_message(chat_id=update.effective_chat.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=products_keyboard)




# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ü—Ä–∏–≤–µ—Çüëã, {user.first_name}! –Ø –±–æ—Ç, –¥–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è.", reply_markup=main_menu())

def echo(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = update.message.text
    
    # –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cur = conn.cursor()
    cur.execute("INSERT INTO messages (text) VALUES (%s)", (text,))
    conn.commit()
    
    # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    similar_products = search_similar_products(text, conn)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(similar_products) > 0:
        response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        response_text += "\n".join(similar_products)
    else:
        response_text = text
        
    context.bot.send_message(chat_id=update.effective_chat.id, text=response_text)
    

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è
def check_product(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
    product_name = update.message.text

    # –ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    cur = conn.cursor()
    cur.execute("SELECT * FROM products WHERE name ILIKE %s", ('%' + product_name + '%',))
    product = cur.fetchone()
    conn.commit()

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω
    if product:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞
        if product[2] > 0:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ —Ü–µ–Ω–µ
            context.bot.send_message(chat_id=update.effective_chat.id, text=f"–¢–æ–≤–∞—Ä \"{product[1]}\" –≤ –Ω–∞–ª–∏—á–∏–∏. –¶–µ–Ω–∞: {product[3]} —Ä—É–±.")
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞
            context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä \"{product[1]}\" –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.")
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞
        context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º \"{product_name}\" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è
updater.dispatcher.add_handler(MessageHandler(Filters.text & Filters.regex(r'^(–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä)$'), check_product))

#–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –∑–∞–∫–∞–∑–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:
def add_order(user_id, product_name, quantity, price, store_name, pickup_time):
    cur = conn.cursor()
    cur.execute("INSERT INTO orders (user_id, product_name, quantity, price, store_name, pickup_time) VALUES (%s, %s, %s, %s, %s, %s)",
                (user_id, product_name, quantity, price, store_name, pickup_time))
    conn.commit()

#–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞:
def notify_store():
    cur = conn.cursor()
    cur.execute("SELECT * FROM orders WHERE pickup_time <= NOW()")
    orders = cur.fetchall()
    for order in orders:
        message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {order[1]} –∑–∞–∫–∞–∑–∞–ª {order[3]} –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ {order[2]}. –û–Ω —Ö–æ—á–µ—Ç –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ {order[5]} –≤ {order[6]}."
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞


# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /search
def search(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyword = context.args[0]
    
    # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    cur = conn.cursor()
    cur.execute("SELECT * FROM products WHERE to_tsvector('russian', description) @@ plainto_tsquery('russian', %s) ORDER BY price", (keyword,))
    rows = cur.fetchall()
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    if len(rows) > 0:
        message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
        for row in rows:
            message += f"{row[1]} ({row[2]} —Ä—É–±.)\n"
    else:
        message = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.bot.send_message(chat_id=update.effective_chat.id, text=message)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
updater.dispatcher.add_handler(CommandHandler('start', start))
updater.dispatcher.add_handler(CommandHandler('search', search))
updater.dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))



def search_similar_products(product_name, conn):
    cur = conn.cursor()
    cur.execute("SELECT name FROM products")
    rows = cur.fetchall()

    product_names = [row[0] for row in rows]
    similar_names = process.extract(product_name, product_names, limit=5, scorer=fuzz.token_set_ratio)
    return [name[0] for name in similar_names]

# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ search_similar_products
similar_products = search_similar_products("product_name", conn)


def echo(update: Update, context: CallbackContext, conn: psycopg2.extensions.connection) -> None:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = update.message.text
    
    # –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cur = conn.cursor()
    cur.execute("INSERT INTO messages (text) VALUES (%s)", (text,))
    conn.commit()
    
    # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    similar_products = search_similar_products(text)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(similar_products) > 0:
        response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        response_text += "\n".join(similar_products)
    else:
        response_text = text
        
    context.bot.send_message(chat_id=update.effective_chat.id, text=response_text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
updater.start_polling()
updater.idle()

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn.close()
